"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Knst Registration
 * Knst Registration
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeetupsApi = exports.MeetupsApiFactory = exports.MeetupsApiFp = exports.MeetupsApiAxiosParamCreator = exports.AttendeesApi = exports.AttendeesApiFactory = exports.AttendeesApiFp = exports.AttendeesApiAxiosParamCreator = exports.AttendeeAttendeeStatusEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.AttendeeAttendeeStatusEnum = {
    Attending: 'ATTENDING',
    Unknown: 'UNKNOWN',
    NotAttending: 'NOT_ATTENDING'
};
/**
 * AttendeesApi - axios parameter creator
 * @export
 */
const AttendeesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds an attendee to a given meetup
         * @param {number} meetupId The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttendee: (meetupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'meetupId' is not null or undefined
            (0, common_1.assertParamExists)('createAttendee', 'meetupId', meetupId);
            const localVarPath = `/api/meetups/{meetupId}/attendee`
                .replace(`{${"meetupId"}}`, encodeURIComponent(String(meetupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a given attendee
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendee: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteAttendee', 'id', id);
            const localVarPath = `/api/attendee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the attendee with the given Id
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeeById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getAttendeeById', 'id', id);
            const localVarPath = `/api/attendee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get attendes for a meetup
         * @param {number} meetupId The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeesByMeetup: (meetupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'meetupId' is not null or undefined
            (0, common_1.assertParamExists)('getAttendeesByMeetup', 'meetupId', meetupId);
            const localVarPath = `/api/meetups/{meetupId}/attendee`
                .replace(`{${"meetupId"}}`, encodeURIComponent(String(meetupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a given attendee
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendee: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateAttendee', 'id', id);
            const localVarPath = `/api/attendee/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AttendeesApiAxiosParamCreator = AttendeesApiAxiosParamCreator;
/**
 * AttendeesApi - functional programming interface
 * @export
 */
const AttendeesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AttendeesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds an attendee to a given meetup
         * @param {number} meetupId The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttendee(meetupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAttendee(meetupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a given attendee
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendee(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAttendee(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the attendee with the given Id
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeeById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAttendeeById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get attendes for a meetup
         * @param {number} meetupId The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeesByMeetup(meetupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAttendeesByMeetup(meetupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a given attendee
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendee(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAttendee(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AttendeesApiFp = AttendeesApiFp;
/**
 * AttendeesApi - factory interface
 * @export
 */
const AttendeesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AttendeesApiFp)(configuration);
    return {
        /**
         * Adds an attendee to a given meetup
         * @param {number} meetupId The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttendee(meetupId, options) {
            return localVarFp.createAttendee(meetupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a given attendee
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendee(id, options) {
            return localVarFp.deleteAttendee(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the attendee with the given Id
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeeById(id, options) {
            return localVarFp.getAttendeeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attendes for a meetup
         * @param {number} meetupId The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeesByMeetup(meetupId, options) {
            return localVarFp.getAttendeesByMeetup(meetupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a given attendee
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendee(id, options) {
            return localVarFp.updateAttendee(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AttendeesApiFactory = AttendeesApiFactory;
/**
 * AttendeesApi - object-oriented interface
 * @export
 * @class AttendeesApi
 * @extends {BaseAPI}
 */
class AttendeesApi extends base_1.BaseAPI {
    /**
     * Adds an attendee to a given meetup
     * @param {number} meetupId The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesApi
     */
    createAttendee(meetupId, options) {
        return (0, exports.AttendeesApiFp)(this.configuration).createAttendee(meetupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a given attendee
     * @param {number} id The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesApi
     */
    deleteAttendee(id, options) {
        return (0, exports.AttendeesApiFp)(this.configuration).deleteAttendee(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the attendee with the given Id
     * @param {number} id The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesApi
     */
    getAttendeeById(id, options) {
        return (0, exports.AttendeesApiFp)(this.configuration).getAttendeeById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get attendes for a meetup
     * @param {number} meetupId The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesApi
     */
    getAttendeesByMeetup(meetupId, options) {
        return (0, exports.AttendeesApiFp)(this.configuration).getAttendeesByMeetup(meetupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a given attendee
     * @param {number} id The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesApi
     */
    updateAttendee(id, options) {
        return (0, exports.AttendeesApiFp)(this.configuration).updateAttendee(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AttendeesApi = AttendeesApi;
/**
 * MeetupsApi - axios parameter creator
 * @export
 */
const MeetupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {Meetup} meetup The meetup to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetup: (meetup, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'meetup' is not null or undefined
            (0, common_1.assertParamExists)('createMeetup', 'meetup', meetup);
            const localVarPath = `/api/meetups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(meetup, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetup: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteMeetup', 'id', id);
            const localVarPath = `/api/meetups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Getting a single meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetupById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMeetupById', 'id', id);
            const localVarPath = `/api/meetups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {Pageable} [pagable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetups: (pagable, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/meetups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (pagable !== undefined) {
                localVarQueryParameter['pagable'] = pagable;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updating a single meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetup: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateMeetup', 'id', id);
            const localVarPath = `/api/meetups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MeetupsApiAxiosParamCreator = MeetupsApiAxiosParamCreator;
/**
 * MeetupsApi - functional programming interface
 * @export
 */
const MeetupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MeetupsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {Meetup} meetup The meetup to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetup(meetup, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMeetup(meetup, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetup(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteMeetup(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Getting a single meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetupById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMeetupById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {Pageable} [pagable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetups(pagable, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMeetups(pagable, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updating a single meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetup(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMeetup(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MeetupsApiFp = MeetupsApiFp;
/**
 * MeetupsApi - factory interface
 * @export
 */
const MeetupsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MeetupsApiFp)(configuration);
    return {
        /**
         *
         * @param {Meetup} meetup The meetup to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeetup(meetup, options) {
            return localVarFp.createMeetup(meetup, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetup(id, options) {
            return localVarFp.deleteMeetup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Getting a single meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetupById(id, options) {
            return localVarFp.getMeetupById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Pageable} [pagable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetups(pagable, options) {
            return localVarFp.getMeetups(pagable, options).then((request) => request(axios, basePath));
        },
        /**
         * Updating a single meetup
         * @param {number} id The id of the Meetup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetup(id, options) {
            return localVarFp.updateMeetup(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MeetupsApiFactory = MeetupsApiFactory;
/**
 * MeetupsApi - object-oriented interface
 * @export
 * @class MeetupsApi
 * @extends {BaseAPI}
 */
class MeetupsApi extends base_1.BaseAPI {
    /**
     *
     * @param {Meetup} meetup The meetup to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetupsApi
     */
    createMeetup(meetup, options) {
        return (0, exports.MeetupsApiFp)(this.configuration).createMeetup(meetup, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a meetup
     * @param {number} id The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetupsApi
     */
    deleteMeetup(id, options) {
        return (0, exports.MeetupsApiFp)(this.configuration).deleteMeetup(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Getting a single meetup
     * @param {number} id The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetupsApi
     */
    getMeetupById(id, options) {
        return (0, exports.MeetupsApiFp)(this.configuration).getMeetupById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Pageable} [pagable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetupsApi
     */
    getMeetups(pagable, options) {
        return (0, exports.MeetupsApiFp)(this.configuration).getMeetups(pagable, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updating a single meetup
     * @param {number} id The id of the Meetup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetupsApi
     */
    updateMeetup(id, options) {
        return (0, exports.MeetupsApiFp)(this.configuration).updateMeetup(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MeetupsApi = MeetupsApi;
